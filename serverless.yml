service: allocations

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteIte
      Resource:
        - !GetAtt AllocationsTable.Arn
  environment:
    apiBaseUrl: ${self:custom.apiBaseUrl.${self:custom.runtimeEnvironment}}
    dynamoEndpoint: ${self:custom.dynamoEndpoint.${self:custom.runtimeEnvironment}}

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  allocate:
    handler: src/api.allocate
    timeout: 10
    events:
      - http:
          path: /allocate
          method: post

custom:
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  runtimeEnvironment: ${env:RUNTIME_ENV, 'aws'}
  apiBaseUrl:
    local: http://localhost:3000/dev
    aws:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref ApiGatewayRestApi
          - ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}"
  dynamoEndpoint:
    local: http://localhost:8000
    aws: https://dynamodb.eu-west-1.amazonaws.com

resources:
  Resources:
    AllocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Allocations
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
